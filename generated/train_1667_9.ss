unflatten(array, depth): unflatten takes an array and a depth and returns an array of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays of arrays
[4, 5, 1, 7, 1],2 -> [[4, [5, 1, 7]], 1]
[12, 1, 5, 3, 1, 55, 2, 3, 7, 8, 1],3 -> [12, 1, [5, [3, 1, 55], 2], [3, 7, 8], 1]
  uf_r(arr): uf_r takes a list of integers and returns a list of integers and lists of integers, where each list of integers is a sublist of the original list, and the sublists are ordered from largest to smallest, and each sublist contains only integers that are divisible by the length of the sublist.
  uf_f(arr): uf_f takes a list of integers and returns a list of integers and lists of integers, where each list of integers is a sublist of the input list, and each integer in the output list is an integer in the input list, and each integer in the output list is not in any of the sublists of the output list, and each sublist of the output list contains at least three integers,
